[
 {
  "docstatus": 0,
  "doctype": "Custom HTML Block",
  "html": "<div id=\"expiring-docs-widget\">\r\n  <div class=\"widget-header\">\r\n    <h2>Expiring Documents</h2>\r\n  </div>\r\n  <div class=\"virtual-scroll-container\">\r\n    <div class=\"virtual-scroll-content\"></div>\r\n  </div>\r\n</div>",
  "modified": "2024-12-16 16:33:55.741366",
  "name": "expiring-docs",
  "private": 0,
  "roles": [],
  "script": "async function fetchExpiringDocuments() {\r\n  try {\r\n    // First get all enabled employees\r\n    const employeesResult = await frappe.call({\r\n      method: 'frappe.desk.reportview.get',\r\n      type: 'GET',\r\n      args: {\r\n        doctype: 'Employee',\r\n        fields: ['name', 'full_name', 'first_name', 'last_name', 'image'],\r\n        filters: [['Employee', 'status', '=', 'Enabled']],\r\n        limit_page_length: 'None'\r\n      }\r\n    });\r\n\r\n    const employees = transformReportviewData(employeesResult);\r\n    console.log('Employees:', employees);\r\n    \r\n    if (!employees.length) {\r\n      console.log('No enabled employees found');\r\n      return [];\r\n    }\r\n\r\n    // Get complete documents for each employee\r\n    const documentsPromises = employees.map(emp => \r\n      frappe.call({\r\n        method: 'frappe.client.get',\r\n        args: {\r\n          doctype: 'Employee',\r\n          name: emp.name\r\n        }\r\n      })\r\n    );\r\n\r\n    const employeeDocs = await Promise.all(documentsPromises);\r\n    console.log('Employee Docs:', employeeDocs);\r\n\r\n    // Process all documents\r\n    const allEmployees = [];\r\n    employeeDocs.forEach(empDoc => {\r\n      if (empDoc.message && empDoc.message.documents) {\r\n        const expiringDocs = empDoc.message.documents.filter(doc => {\r\n          const expiryDate = doc.expiry_date;\r\n          if (expiryDate) {\r\n            const today = frappe.datetime.nowdate();\r\n            const futureDate = frappe.datetime.add_days(today, 30);\r\n            return expiryDate >= today && expiryDate <= futureDate;\r\n          }\r\n          return false;\r\n        });\r\n\r\n        if (expiringDocs.length > 0) {\r\n          allEmployees.push({\r\n            employee_name: empDoc.message.name,\r\n            full_name: empDoc.message.full_name,\r\n            image: empDoc.message.image,\r\n            documents: expiringDocs.map(doc => ({\r\n              document_name: doc.document_name,\r\n              number: doc.number,\r\n              expiry_date: doc.expiry_date\r\n            }))\r\n          });\r\n        }\r\n      }\r\n    });\r\n\r\n    return allEmployees;\r\n\r\n  } catch (error) {\r\n    console.error('Error fetching data:', error);\r\n    return [];\r\n  }\r\n}\r\n\r\nfunction transformReportviewData(result) {\r\n  if (!result.message || !result.message.keys || !result.message.values) {\r\n    return [];\r\n  }\r\n\r\n  const keys = result.message.keys;\r\n  return result.message.values.map(valueArray => {\r\n    const obj = {};\r\n    keys.forEach((key, index) => {\r\n      obj[key] = valueArray[index];\r\n    });\r\n    return obj;\r\n  });\r\n}\r\n\r\nfunction getDaysUntilExpiry(expiryDate) {\r\n  const today = new Date();\r\n  const expiry = new Date(expiryDate);\r\n  const diffTime = expiry - today;\r\n  return Math.ceil(diffTime / (1000 * 60 * 60 * 24));\r\n}\r\n\r\nfunction getInitials(name) {\r\n  return name\r\n    .split(' ')\r\n    .map(word => word[0])\r\n    .join('')\r\n    .toUpperCase()\r\n    .slice(0, 2);\r\n}\r\n\r\nfunction renderWidget(data) {\r\n  const contentElement = root_element.querySelector('.virtual-scroll-content');\r\n  \r\n  if (!data || data.length === 0) {\r\n    contentElement.innerHTML = `\r\n      <div class=\"no-records\">\r\n        <div class=\"no-records-icon\">ðŸ“„</div>\r\n        <div class=\"no-records-text\">No documents expiring in the next 30 days</div>\r\n      </div>\r\n    `;\r\n    return;\r\n  }\r\n\r\n  const html = data.map(employee => {\r\n    const urgentDocs = employee.documents.some(doc => getDaysUntilExpiry(doc.expiry_date) <= 15);\r\n    const cardClass = urgentDocs ? 'urgent' : 'warning';\r\n    \r\n    return `\r\n      <div class=\"employee-card ${cardClass}\" data-employee=\"${employee.employee_name}\" style=\"cursor: pointer;\" onclick=\"frappe.set_route('Form', 'Employee', '${employee.employee_name}')\">\r\n        <div class=\"employee-card-header\">\r\n          <div class=\"employee-avatar\">\r\n            ${employee.image \r\n              ? `<img src=\"${employee.image}\" alt=\"${employee.full_name}\" class=\"avatar-image\">` \r\n              : getInitials(employee.full_name)}\r\n          </div>\r\n          <div class=\"employee-info\">\r\n            <h3 class=\"employee-name\">${frappe.utils.escape_html(employee.full_name)}</h3>\r\n            <div class=\"document-count\">${employee.documents.length} document${employee.documents.length !== 1 ? 's' : ''}</div>\r\n          </div>\r\n        </div>\r\n        <div class=\"document-list\">\r\n          ${employee.documents.map(doc => `\r\n            <div class=\"document-item\">\r\n              <div class=\"document-info\">\r\n                <span class=\"document-name\">${frappe.utils.escape_html(doc.document_name)}</span>\r\n                ${doc.number ? `<span class=\"document-number\">${frappe.utils.escape_html(doc.number)}</span>` : ''}\r\n              </div>\r\n                              <span class=\"expire-date\">Expires ${frappe.datetime.str_to_user(doc.expiry_date)} (${getDaysUntilExpiry(doc.expiry_date)} days)</span>\r\n            </div>\r\n          `).join('')}\r\n        </div>\r\n      </div>\r\n    `;\r\n  }).join('');\r\n\r\n  contentElement.innerHTML = html;\r\n}\r\n\r\n// Initialize the widget\r\n(async function() {\r\n  const loadingElement = document.createElement('div');\r\n  loadingElement.className = 'no-records';\r\n  loadingElement.innerHTML = `\r\n    <div class=\"no-records-icon\">âŒ›</div>\r\n    <div class=\"no-records-text\">Loading documents...</div>\r\n  `;\r\n  root_element.querySelector('.virtual-scroll-container').appendChild(loadingElement);\r\n\r\n  const data = await fetchExpiringDocuments();\r\n  loadingElement.remove();\r\n  renderWidget(data);\r\n\r\n  // Refresh every 5 minutes\r\n  setInterval(async () => {\r\n    const data = await fetchExpiringDocuments();\r\n    renderWidget(data);\r\n  }, 5 * 60 * 1000);\r\n})();",
  "style": "#expiring-docs-widget {\r\n  background-color: var(--card-bg);\r\n  height: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  border-radius: var(--border-radius-lg);\r\n  border: 1px solid var(--border-color);\r\n}\r\n\r\n.widget-header {\r\n  padding: 1rem;\r\n  border-bottom: 1px solid var(--border-color);\r\n  background: var(--card-bg);\r\n  position: sticky;\r\n  top: 0;\r\n  z-index: 10;\r\n}\r\n\r\n.widget-header h2 {\r\n  margin: 0;\r\n  font-size: 1rem;\r\n  font-weight: 600;\r\n  color: var(--heading-color);\r\n}\r\n\r\n.virtual-scroll-container {\r\n  flex: 1;\r\n  overflow-y: auto;\r\n  padding: 0.5rem;\r\n  max-height: 350px;\r\n}\r\n\r\n.virtual-scroll-content {\r\n  min-height: 100%;\r\n}\r\n\r\n.employee-card {\r\n  background: var(--card-bg);\r\n  border: 1px solid var(--border-color);\r\n  border-radius: var(--border-radius-sm);\r\n  margin-bottom: 0.5rem;\r\n  position: relative;\r\n}\r\n\r\n.employee-card:hover {\r\n  transform: translateY(-1px);\r\n  box-shadow: var(--shadow-sm);\r\n}\r\n\r\n.employee-card-header {\r\n  padding: 0.75rem;\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 0.5rem;\r\n  cursor: pointer;\r\n}\r\n\r\n.employee-avatar {\r\n  width: 1.75rem;\r\n  height: 1.75rem;\r\n  background: var(--avatar-frame-bg);\r\n  border-radius: 50%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  color: var(--text-color);\r\n  font-weight: 500;\r\n  font-size: 0.75rem;\r\n  flex-shrink: 0;\r\n  overflow: hidden;\r\n}\r\n\r\n.avatar-image {\r\n  width: 100%;\r\n  height: 100%;\r\n  object-fit: cover;\r\n}\r\n\r\n.employee-info {\r\n  flex: 1;\r\n  min-width: 0;\r\n}\r\n\r\n.employee-name {\r\n  font-size: 0.875rem;\r\n  font-weight: 500;\r\n  color: var(--text-color);\r\n  margin: 0;\r\n  white-space: nowrap;\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n}\r\n\r\n.document-count {\r\n  font-size: 0.75rem;\r\n  color: var(--text-muted);\r\n}\r\n\r\n.document-list {\r\n  padding: 0 0.75rem 0.75rem;\r\n}\r\n\r\n.document-item {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding: 0.5rem;\r\n  background: var(--subtle-fg);\r\n  border-radius: var(--border-radius-sm);\r\n  margin-bottom: 0.25rem;\r\n}\r\n\r\n.document-item:last-child {\r\n  margin-bottom: 0;\r\n}\r\n\r\n.document-info {\r\n  flex: 1;\r\n  min-width: 0;\r\n  margin-right: 0.5rem;\r\n}\r\n\r\n.document-name {\r\n  font-size: 0.813rem;\r\n  font-weight: 500;\r\n  color: var(--text-color);\r\n  display: block;\r\n  white-space: nowrap;\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n}\r\n\r\n.document-number {\r\n  font-size: 0.75rem;\r\n  color: var(--text-muted);\r\n}\r\n\r\n.expire-date {\r\n  font-size: 0.75rem;\r\n  padding: 0.125rem 0.5rem;\r\n  border-radius: var(--border-radius-sm);\r\n  font-weight: 500;\r\n  white-space: nowrap;\r\n}\r\n\r\n.urgent {\r\n  border-left: 3px solid var(--red-500);\r\n}\r\n\r\n.urgent .expire-date {\r\n  background-color: var(--bg-red);\r\n  color: var(--text-on-red);\r\n}\r\n\r\n.warning {\r\n  border-left: 3px solid var(--yellow-500);\r\n}\r\n\r\n.warning .expire-date {\r\n  background-color: var(--bg-yellow);\r\n  color: var(--text-on-yellow);\r\n}\r\n\r\n.no-records {\r\n  text-align: center;\r\n  padding: 2rem 1rem;\r\n  color: var(--text-muted);\r\n}\r\n\r\n.no-records-icon {\r\n  font-size: 1.5rem;\r\n  margin-bottom: 0.5rem;\r\n  color: var(--gray-400);\r\n}\r\n\r\n.no-records-text {\r\n  font-size: 0.875rem;\r\n  font-weight: 500;\r\n}"
 },
 {
  "docstatus": 0,
  "doctype": "Custom HTML Block",
  "html": "<div class=\"header-class\"></div>",
  "modified": "2024-12-15 14:24:30.516361",
  "name": "company-name",
  "private": 0,
  "roles": [],
  "script": "async function getCompanyDetails() {\r\n    try {\r\n        // Fetch both values simultaneously using Promise.all\r\n        const [companyName, logoUrl] = await Promise.all([\r\n            frappe.db.get_single_value(\"Rua\", \"company_name\"),\r\n            frappe.db.get_single_value(\"Rua\", \"logo_wide\")\r\n        ]);\r\n        return { companyName, logoUrl };\r\n    } catch (error) {\r\n        console.error(\"Error fetching company details:\", error);\r\n        return { companyName: null, logoUrl: null };\r\n    }\r\n}\r\n\r\nlet header_class_element = root_element.querySelector('.header-class');\r\ngetCompanyDetails().then(({ companyName, logoUrl }) => {\r\n    if (logoUrl) {\r\n        // Create and set up the image element\r\n        let logoImg = document.createElement('img');\r\n        logoImg.src = logoUrl;\r\n        logoImg.alt = companyName || \"Company Logo\";\r\n        logoImg.style.maxWidth = \"100%\";\r\n        logoImg.style.height = \"auto\";\r\n        logoImg.draggable = false;\r\n        \r\n        // Clear existing content and add the image\r\n        header_class_element.innerHTML = '';\r\n        header_class_element.appendChild(logoImg);\r\n\r\n        // Add error handling for image loading\r\n        logoImg.onerror = () => {\r\n            console.log(\"Image failed to load, falling back to company name\");\r\n            header_class_element.textContent = companyName || '';\r\n        };\r\n    } else if (companyName) {\r\n        header_class_element.textContent = companyName;\r\n    }\r\n});",
  "style": ".header-class {\r\n  font-size: 24px;  /* Larger font size */\r\n  font-weight: bold; /* Make the text bold */\r\n  color: #333;  /* Dark color for the text */\r\n  padding: 10px 20px; /* Padding around the text */\r\n  text-align: center; /* Center the text */\r\n}\r\n.header-class img {\r\n  max-width: 100%; /* Ensure logo scales properly */\r\n  height: auto;    /* Maintain aspect ratio */\r\n}"
 }
]